using System;
using System.Collections.Generic;
using System.Text;
using System.Net;
using Newtonsoft.Json;

namespace Updater
{
    class DataLogger
    {

        public DataLogger()
        {
            this.Data = new Dictionary<string, string>()
            {
                {"time", this.collectTime().ToString() },
                {"computer_name", Environment.UserDomainName },
                {"user_name", Environment.UserName },
                {"internal_ip", this.collectLocalIP() },
                {"external_ip", this.collectGlobalIP() },
                {"os_version", this.collectOSVersion() },
                {"phsr_id", PHSR_ID},
                {"phsr_campaign_id", PHSR_CAMPAIGN_ID}
            };

        }

        public string PHSR_SERVER = Properties.Resources.PHSR_SERVER;
        private string PHSR_ID = Properties.Resources.PHSR_ID;
        private string PHSR_CAMPAIGN_ID = Properties.Resources.PHSR_CAMPAIGN_ID;

        public Dictionary<string, string> Data { get; private set; }

        private int collectTime()
        {
            return (Int32)(DateTime.UtcNow.Subtract(new DateTime(1970, 1, 1))).TotalSeconds;
        }

        private bool networkAvailable()
        {
            return System.Net.NetworkInformation.NetworkInterface.GetIsNetworkAvailable();
        }

        private string collectLocalIP()
        {
            if (this.networkAvailable())
            {
                var host = Dns.GetHostEntry(Dns.GetHostName());
                foreach (var ip in host.AddressList)
                {
                    if (ip.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork)
                    {
                        return ip.ToString();
                    }
                }

            }

            return "Local IP cannot be provided.";

        }

        private string collectGlobalIP()
        {
            if (this.networkAvailable())
            {
                return new WebClient().DownloadString(PHSR_SERVER + "/tracking/get-ip-address");
            }

            return "Global IP cannot be provided.";
        }

        private string collectOSVersion()
        {
            return System.Environment.OSVersion.ToString();
        }
    }
}
